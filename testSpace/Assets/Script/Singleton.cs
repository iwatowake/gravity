//----------------------------------------------------------
// using
//----------------------------------------------------------
using UnityEngine;

//----------------------------------------------------------
//	@class Singleton<T>
//	@brief シングルトンのテンプレートクラス
//----------------------------------------------------------
public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
{
	//----------------------------------------------------------
	// private static valiables
	//----------------------------------------------------------
	private static T instance;		//!< 唯一のインスタンス

	//----------------------------------------------------------
	// public static method
	//----------------------------------------------------------
	//----------------------------------------------------------
	//! 唯一のインスタンスを取得する
	//!
	//! @return 唯一のインスタンス
	//----------------------------------------------------------
	public static T Instance {

		get
		{
			// インスタンスが空の場合
			if( instance == null )
			{
				// 型名で検索
				instance = (T)FindObjectOfType( typeof(T) );

				// 型が見つからない場合はエラーとして吐く
				if (instance == null)
				{
					Debug.LogError (typeof(T) + "is nothing");
				}
			}

			// 唯一のインタンスを返す
			return instance;
		}
	}
	
}

